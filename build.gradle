plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'maven'
}

apply plugin: 'java'

group 'x.samantha'
version '0.1.4'
archivesBaseName = 'CommandsJDA'

repositories {
    jcenter()
}

dependencies {
    implementation group: 'net.dv8tion', name: 'JDA', version: '4.2.0_218'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    implementation group: 'org.apache.lucene', name: 'lucene-core', version: '8.7.0'
    implementation group: 'org.apache.lucene', name: 'lucene-queryparser', version: '8.7.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'discord'
        name = 'CommandsJDA'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/x-Samantha/CommandsJDA.git'

        version {
            name = project.version
            desc = 'Pre-release CommandsJDA'
            released = new Date()
            vcsTag = project.version
        }
    }
    configurations = ['archives']
    publish = true
}


task createPOM {
    pom {
        project {
            packaging 'aar'
            groupId project.group
            artifactId 'CommandsJDA'
            version project.version
            name 'CommandsJDA'
            inceptionYear '2020'
            licenses {
                license {
                    name 'MIT'
                    url 'https://opensource.org/licenses/MIT'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    name 'Samantha Blackrose'
                    roles {
                        role 'Lead Developer'
                    }
                }
            }
            scm {
                connection 'https://github.com/x-Samantha/CommandsJDA.git'
                developerConnection 'https://github.com/x-Samantha/CommandsJDA.git'
            }
        }
    }.writeTo("pom.xml")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

build {
    dependsOn('createPOM', 'bintrayUpload')
}